

strict namespace{

// YEAH BITCH! HARD CODING!

enum : fixed { 
  CSHUD_HEALTH_X_PROPORTION = 0.0067708333,//fixed(13 / int(1920.0)),
  CSHUD_ARMOUR_X_PROPORTION = 0.201041666, //fixed(386.0 / 1920.0),
  CSHUD_TIMER_X_1_PROPORTION = 0.4671875,//fixed(897.0 / 1920.0),
  CSHUD_TIMER_X_2_PROPORTION = 0.503125,//fixed(966.0 / 1920.0),
  CSHUD_TIMER_X_3_PROPORTION = 0.525,//fixed(1008.0 / 1920.0),
  CSHUD_AMMO_1_PROPORTION = 0.9354166666666667,//fixed(1796.0 / 1920.0),
  CSHUD_AMMO_2_PROPORTION = 0.9401041666,//fixed(1805.0 / 1920.0),
  CSHUD_AMMO_3_PROPORTION = 0.978125//fixed(1878.0 / 1920.0)
};

fixed CSHudXCoord(fixed proportion, fixed pivot = 0.1)
{
    // If aspect ratio is not 3:4, deducts 'border' value from the position. zdoom restriction bullshit.
    fixed side_border = (GetAspectRatio() != ASPECT_4_3 ? fixed(((int)GetScreenWidth() - ((int)GetScreenWidth() * 3/4)) / 2)  : 0.0);
    return customceil(proportion * fixed((int)GetScreenWidth())) - side_border + pivot;
}

// Scales the given coordinate, which should be based on 1920*1080 to be appropriate for current height.
function fixed CSHudScaleYCoord(fixed coordinate)
{
    fixed temp = customceil(coordinate * fixed(GetScreenHeight()) / 1080.0) + 0.1;
    print(f:temp, s:" ", f:customceil(coordinate * fixed(GetScreenHeight()) / 1080.0), s:" ", f:coordinate * fixed(GetScreenHeight()) / 1080.0, s:" ", f:coordinate * fixed((int)GetScreenHeight()) / 1080.0);
    return temp;
}

function fixed CSHudYCoord()
{
    //return CSHudScaleYCoord(1044.0);
    return customceil(0.9666 * Fixed(GetScreenHeight())) + 0.1; //I FUCKING hate hardcoding
}

function fixed CSHudX_Ammo_Offset()
{
    return customceil(-1.0/20.0 * fixed((GetAspectRatio() != ASPECT_4_3 ? (int)GetScreenWidth() * 3/4 : (int)GetScreenWidth())) + 72.0);
}

function fixed CSHudX_Timer_Offset()
{
    return customceil(-1.0/32.0 * fixed((GetAspectRatio() != ASPECT_4_3 ? (int)GetScreenWidth() * 3/4 : (int)GetScreenWidth())) + 45.0)   ;
}

function fixed CSHudY_Offset()
{
    return customceil(-1.0/40.0 * fixed((int)GetScreenHeight()) + 27.0);
}

function fixed CSHudYCoord_Timer()
{
    if(GetCVar("cl_cs_timer_down") == 1)
    {
        return CSHudYCoord();
    }

    return customceil(0.0185 * Fixed(GetScreenHeight())) + 0.1; //20 / 1080
}

Script "CSHud" ENTER CLIENTSIDE
{
    if(PlayerNumber() != ConsolePlayerNumber())
        terminate; 
        
    while(1)
    {
        SetFont("CSHud");
        SetHUDSize((GetAspectRatio() != ASPECT_4_3 ? (int)GetScreenWidth() * 3/4 : (int)GetScreenWidth()), (int)GetScreenHeight(), true);

        // Health
        HudMessage(s:"+ ", d:GetActorHealth(0); HUDMSG_PLAIN|HUDMSG_ALPHA, -3200, CR_GOLD
        , CSHudXCoord(CSHUD_HEALTH_X_PROPORTION)
        , CSHudYCoord() - CSHudY_Offset()
        , 0.0, 0.6);
        // Armour
        HudMessage(s:"* ", d:CheckInventory("BasicArmor"); HUDMSG_PLAIN|HUDMSG_ALPHA, -3201, CR_GOLD, 
        CSHudXCoord(CSHUD_ARMOUR_X_PROPORTION), 
        CSHudYCoord() - CSHudY_Offset(), 
        0.0, 0.6);
        // Timer
        if(GetTimer() >= 1)
        {
            HudMessage(s:"# "; HUDMSG_PLAIN|HUDMSG_ALPHA, -3202, CR_GOLD, CSHudXCoord(CSHUD_TIMER_X_1_PROPORTION) - CSHudX_Timer_Offset(), CSHudYCoord_Timer() - CSHudY_Offset(), 0.0, 0.6);
            HudMessage(d:GetTimer() / 60, s:":"; HUDMSG_PLAIN|HUDMSG_ALPHA, -3203, CR_GOLD, CSHudXCoord(CSHUD_TIMER_X_2_PROPORTION, 0.2), CSHudYCoord_Timer() - CSHudY_Offset(), 0.0, 0.6);
            HudMessage(s:(GetTimer() % 60 < 10 ? "0" : ""), d:(GetTimer() % 60); HUDMSG_PLAIN|HUDMSG_ALPHA, -3204, CR_GOLD, CSHudXCoord(CSHUD_TIMER_X_3_PROPORTION, 0.2) + CSHudX_Timer_Offset(), CSHudYCoord_Timer() - CSHudY_Offset(), 0.0, 0.6);
        }
        else
        {
            // Clears the timer hudmessages
            HudMessage(s:""; HUDMSG_PLAIN|HUDMSG_ALPHA, -3202, CR_GOLD, CSHudXCoord(CSHUD_TIMER_X_1_PROPORTION), CSHudYCoord() - 20.0, 0.0, 0.6);
            HudMessage(s:""; HUDMSG_PLAIN|HUDMSG_ALPHA, -3203, CR_GOLD, CSHudXCoord(CSHUD_TIMER_X_2_PROPORTION, 0.2), CSHudYCoord() - CSHudY_Offset(), 0.0, 0.6);
            HudMessage(s:""; HUDMSG_PLAIN|HUDMSG_ALPHA, -3204, CR_GOLD, CSHudXCoord(CSHUD_TIMER_X_3_PROPORTION, 0.2), CSHudYCoord() - 10.0, 0.0, 0.6);
        }
        // Ammo
        HudMessage(d:CheckInventory(CSGetWeaponMag(GetWeapon())); HUDMSG_PLAIN|HUDMSG_ALPHA, -3205, CR_GOLD, CSHudXCoord(CSHUD_AMMO_1_PROPORTION, 0.2) - CSHudX_Ammo_Offset(), CSHudYCoord() - CSHudY_Offset(), 0.0, 0.6);
        //@TODO Revert below hudmessage's Y coordinate to 1042, if possible
        HudMessage(s:"|"; HUDMSG_PLAIN|HUDMSG_ALPHA, -3206, CR_GOLD, CSHudXCoord(CSHUD_AMMO_2_PROPORTION) - CSHudX_Ammo_Offset(), CSHudYCoord() - CSHudY_Offset(), 0.0, 0.6);
        HudMessage(d:CheckInventory(CSGetWeaponAmmo(GetWeapon())); HUDMSG_PLAIN|HUDMSG_ALPHA, -3207, CR_GOLD, CSHudXCoord(CSHUD_AMMO_3_PROPORTION, 0.2), CSHudYCoord() - CSHudY_Offset(), 0.0, 0.6);
        Delay(1);
    }
}

}